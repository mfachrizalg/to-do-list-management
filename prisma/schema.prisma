// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String?

  toDoLists ToDoList[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model ToDoList {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  tasks Task[]
  Post  Post[]

  @@map("todolists")
}

model Task {
  id          String    @id @default(uuid())
  listId      String
  title       String
  description String?
  status      String    @default("pending") // Options: "pending", "completed"
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  toDoList ToDoList @relation(fields: [listId], references: [id])
  Post     Post[]

  @@map("tasks")
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  taskId    String? // Optional: Shared task
  listId    String? // Optional: Shared To-Do List
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  task     Task?     @relation(fields: [taskId], references: [id])
  toDoList ToDoList? @relation(fields: [listId], references: [id])
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("likes")
}
